typeof GfxModule === 'undefined' && importScripts('gfx.module.js'); const CMD_CREATE_SURFACE = 0x1, CMD_DELETE_SURFACE = 0x2, CMD_FRAME = 0x3, CMD_REPAINT = 0x4; var decoderInitialized = ![], loopIsRunning = ![], DecoderModule, enableLog, initSurface, gfxDecode, gfxDecodeFrame, getSurfaceChanges, pixelData = null, surfaces = [], changesBuffSize = 0x400 * 0x8, pChangesBuff = 0x0, pChangesCount = 0x0, cmdQueue = [], frameBufferLen = 0x0, frameBufferPtr = 0x0, screenBuffers = []; function decodeCmd(_0x2ec9dc, _0xef5181, _0x2699c5, _0x28b19e, _0xdda2bc, _0x121f3c, _0x497bf3, _0x481bec) { var _0x105f20 = 0x0; if (_0x497bf3 > 0x0) { var _0x3f5052 = _0x481bec['subarray'](0x1c); _0x105f20 = DecoderModule['_malloc'](_0x497bf3), DecoderModule['HEAPU8']['set'](_0x3f5052, _0x105f20); } var _0x538845 = gfxDecode(_0x2ec9dc, _0xef5181, _0x2699c5, _0x28b19e, _0xdda2bc, _0x121f3c, _0x105f20, _0x497bf3); if (_0x105f20 != 0x0) DecoderModule['_free'](_0x105f20); return _0x538845; } function decodeFrame(_0x5b3d87, _0x4b5f25) { var _0x368a2a = null; if (_0x5b3d87 > 0x0) { var _0x335ed9 = _0x4b5f25['subarray'](0xc); if (_0x5b3d87 > frameBufferLen) try { if (frameBufferPtr != 0x0) DecoderModule['_free'](frameBufferPtr); frameBufferPtr = DecoderModule['_malloc'](_0x5b3d87), frameBufferLen = _0x5b3d87; } catch (_0x663e54) { return console['error']('GFX:\x20malloc\x20failed\x20for\x20decodeFrame', _0x5b3d87, _0x663e54), null; } DecoderModule['HEAPU8']['set'](_0x335ed9, frameBufferPtr); } try { _0x368a2a = gfxDecodeFrame(frameBufferPtr, _0x5b3d87); } catch (_0x270d14) { console['error']('GFX:\x20decodeFrame\x20failed', _0x270d14); } return _0x368a2a; } function applyChanges(_0x506a42) { decoderData = DecoderModule['HEAPU8']['subarray'](_0x506a42['screenBuff'], _0x506a42['screenBuff'] + _0x506a42['screenBuffSize']); if (pixelData != null && decoderData['length'] == pixelData['length']) pixelData['set'](decoderData); else pixelData = new Uint8ClampedArray(decoderData); var _0x5bcacd = new ImageData(pixelData, _0x506a42['width'], _0x506a42['height']), _0x3fdd7a = DecoderModule['HEAPU32'][pChangesCount >> 0x2], _0x2bff02 = _0x506a42['width'], _0x544f59 = _0x506a42['height'], _0x203148 = 0x0, _0x4d7f24 = 0x0, _0x35c371 = _0x506a42['offscreen']['getContext']('2d'); for (var _0x34ebc8 = 0x0; _0x34ebc8 < _0x3fdd7a; _0x34ebc8++) { var _0x4a5352 = (pChangesBuff >> 0x1) + _0x34ebc8 * 0x4, _0x189c14 = DecoderModule['HEAPU16'][_0x4a5352], _0x20da72 = DecoderModule['HEAPU16'][_0x4a5352 + 0x1], _0xae228f = DecoderModule['HEAPU16'][_0x4a5352 + 0x2], _0x5e849c = DecoderModule['HEAPU16'][_0x4a5352 + 0x3]; _0x35c371['putImageData'](_0x5bcacd, 0x0, 0x0, _0x189c14, _0x20da72, _0xae228f - _0x189c14, _0x5e849c - _0x20da72); if (_0x189c14 < _0x2bff02) _0x2bff02 = _0x189c14; if (_0x20da72 < _0x544f59) _0x544f59 = _0x20da72; if (_0xae228f > _0x203148) _0x203148 = _0xae228f; if (_0x5e849c > _0x4d7f24) _0x4d7f24 = _0x5e849c; } var _0x1c5bf0 = _0x506a42['offscreen']['transferToImageBitmap'](); postMessage({ 'type': 'paint', 'surface': _0x506a42['webId'], 'bitmap': _0x1c5bf0, 't': _0x544f59, 'l': _0x2bff02, 'r': _0x203148, 'b': _0x4d7f24 }, [_0x1c5bf0]); } function processQueue() { while (cmdQueue['length'] > 0x0) { loopIsRunning = !![]; var _0x566ceb = cmdQueue[0x0]; cmdQueue['splice'](0x0, 0x1); switch (_0x566ceb['type']) { case CMD_CREATE_SURFACE: var _0xaf6a14 = _0x566ceb['data']['width'] * 0x4, _0x31246f = _0xaf6a14 * _0x566ceb['data']['height'], _0x12c16d = 0x0; if (screenBuffers[_0x566ceb['data']['id']]) { if (screenBuffers[_0x566ceb['data']['id']]['size'] >= _0x31246f) _0x12c16d = screenBuffers[_0x566ceb['data']['id']]['buffer']; else DecoderModule['_free'](screenBuffers[_0x566ceb['data']['id']]['buffer']); } if (_0x12c16d == 0x0) try { _0x12c16d = DecoderModule['_malloc'](_0x31246f), screenBuffers[_0x566ceb['data']['id']] = { 'buffer': _0x12c16d, 'size': _0x31246f }; } catch (_0xcee107) { console['error']('GFX:\x20_malloc\x20failed\x20for\x20screen\x20buffer', _0x31246f, _0xcee107); } var _0x29a10d = initSurface(_0x566ceb['data']['id'], _0x566ceb['data']['width'], _0x566ceb['data']['height'], _0xaf6a14, _0x566ceb['data']['pixelFormat'], _0x12c16d); _0x29a10d == 0x0 ? surfaces[_0x566ceb['data']['id']] = { 'id': _0x566ceb['data']['id'], 'webId': _0x566ceb['data']['webId'], 'width': _0x566ceb['data']['width'], 'height': _0x566ceb['data']['height'], 'scanline': _0xaf6a14, 'pixelFormat': _0x566ceb['data']['pixelFormat'], 'screenBuff': _0x12c16d, 'screenBuffSize': _0x31246f, 'offscreen': new OffscreenCanvas(_0x566ceb['data']['width'], _0x566ceb['data']['height']), 'initialized': decoderInitialized } : console['error']('GFX:\x20initSurface\x20failed\x20with\x20code\x20' + _0x29a10d); break; case CMD_DELETE_SURFACE: if (surfaces[_0x566ceb['data']['id']]) surfaces[_0x566ceb['data']['id']] = null; break; case CMD_FRAME: var _0x2e8b18 = _0x566ceb['data'], _0x29a10d, _0x5e6cac = null; const _0x482bc2 = new DataView(_0x2e8b18['buffer']); var _0x113339 = _0x482bc2['getUint32'](_0x2e8b18['byteOffset'], !![]), _0x27ad0b = _0x482bc2['getUint32'](_0x2e8b18['byteOffset'] + 0x4, !![]); if (_0x27ad0b == 0xff) { var _0x5afbcf = _0x482bc2['getUint32'](_0x2e8b18['byteOffset'] + 0x8, !![]); _0x29a10d = decodeFrame(_0x5afbcf, _0x2e8b18), _0x5e6cac = _0x29a10d; } else { var _0x4093d9 = _0x482bc2['getUint32'](_0x2e8b18['byteOffset'] + 0x8, !![]), _0x3e57af = _0x482bc2['getUint32'](_0x2e8b18['byteOffset'] + 0xc, !![]), _0x2d8f76 = _0x482bc2['getUint32'](_0x2e8b18['byteOffset'] + 0x10, !![]), _0x3a90f4 = _0x482bc2['getUint32'](_0x2e8b18['byteOffset'] + 0x14, !![]), _0x5afbcf = _0x482bc2['getUint32'](_0x2e8b18['byteOffset'] + 0x18, !![]); _0x29a10d = decodeCmd(_0x113339, _0x27ad0b, _0x4093d9, _0x3e57af, _0x2d8f76, _0x3a90f4, _0x5afbcf, _0x2e8b18); } for (var _0x1e3476 = 0x0; _0x1e3476 < surfaces['length']; _0x1e3476++) { if (surfaces[_0x1e3476] == null) continue; try { getSurfaceChanges(surfaces[_0x1e3476]['id'], pChangesBuff, pChangesCount); } catch (_0x3e69ab) { console['error']('GFX:\x20getSurfaceChanges\x20error', _0x3e69ab); continue; } DecoderModule['HEAPU32'][pChangesCount >> 0x2] > 0x0 && applyChanges(surfaces[_0x1e3476]); } _0x5e6cac != null && postMessage({ 'type': 'frameEnd', 'frameId': _0x5e6cac }); break; case CMD_REPAINT: for (var _0x1e3476 = 0x0; _0x1e3476 < surfaces['length']; _0x1e3476++) { if (surfaces[_0x1e3476] != null) { let _0x4b37dd = surfaces[_0x1e3476]; decoderData = DecoderModule['HEAPU8']['subarray'](_0x4b37dd['screenBuff'], _0x4b37dd['screenBuff'] + _0x4b37dd['screenBuffSize']); if (pixelData != null && decoderData['length'] == pixelData['length']) pixelData['set'](decoderData); else pixelData = new Uint8ClampedArray(decoderData); var _0xd7cf43 = new ImageData(pixelData, _0x4b37dd['width'], _0x4b37dd['height']), _0x4743aa = _0x4b37dd['offscreen']['getContext']('2d'); _0x4743aa['putImageData'](_0xd7cf43, 0x0, 0x0, 0x0, 0x0, _0x4b37dd['width'], _0x4b37dd['height']); var _0x268717 = _0x4b37dd['offscreen']['transferToImageBitmap'](); postMessage({ 'type': 'paint', 'surface': _0x4b37dd['webId'], 'bitmap': _0x268717, 't': 0x0, 'l': 0x0, 'r': _0x4b37dd['width'], 'b': _0x4b37dd['height'] }, [_0x268717]); } } break; } } loopIsRunning = ![]; } function onMessage(_0x563148) { var _0x5cddf5 = _0x563148['data']; switch (_0x5cddf5['type']) { case 'addSurface': cmdQueue['push']({ 'type': CMD_CREATE_SURFACE, 'data': _0x5cddf5 }); break; case 'deleteSurface': cmdQueue['push']({ 'type': CMD_DELETE_SURFACE, 'data': _0x5cddf5 }); break; case 'process': cmdQueue['push']({ 'type': CMD_FRAME, 'data': _0x5cddf5['data'] }); break; case 'repaint': cmdQueue['push']({ 'type': CMD_REPAINT }); break; }decoderInitialized && !loopIsRunning && setTimeout(processQueue, 0x0); } addEventListener('message', onMessage), GfxModule()['then'](_0x59259b => { DecoderModule = _0x59259b, enableLog = DecoderModule['cwrap']('enableLog', 'number', ['number', 'number']), initSurface = DecoderModule['cwrap']('initSurface', 'number', ['number', 'number', 'number', 'number', 'number', 'number']), gfxDecode = DecoderModule['cwrap']('gfxDecode', 'number', ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']), gfxDecodeFrame = DecoderModule['cwrap']('gfxDecodeFrame', 'number', ['number', 'number']), getSurfaceChanges = DecoderModule['cwrap']('getSurfaceChanges', 'number', ['number', 'number', 'number']), enableLog(0x0, 0x3), pChangesBuff = DecoderModule['_malloc'](changesBuffSize), pChangesCount = DecoderModule['_malloc'](0x4), decoderInitialized = !![], !loopIsRunning && cmdQueue['length'] > 0x0 && setTimeout(processQueue, 0x0); });