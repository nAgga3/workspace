/* Thinfinity(c) Remote Desktop Server v7.0.3.114 */
(function(){function FilesEnvironment(){var _ref=this;let _minFiles=undefined;let _lsKey="__#flsenv__";let _maxTime=1E3*60*6;function initialize(){readData();minFilesEnv()}function minFilesEnv(){if(typeof _minFiles!="undefined")return _minFiles;else return getEnvironment()}function getEnvironment(){let scripts=window.document.head.querySelectorAll("script");if(scripts?.length>0){let idx=0,c=true,l=scripts.length;_minFiles=true;while(idx<l&&c){if(scripts[idx].src.indexOf("thinfinity.files.environment.js")!=
-1){c=false;_minFiles=false}idx++}writeData()}}function readData(){let data=window.localStorage.getItem(_lsKey);if(data)try{let d=JSON.parse(data);if(Date.now()-d.date<_maxTime)_minFiles=d.minFiles??true;else if(window?.settings)window.localStorage.removeItem(_lsKey);else _minFiles=d.minFiles}catch(error){}}function writeData(){window.localStorage.setItem(_lsKey,JSON.stringify({minFiles:_minFiles,date:Date.now()}))}initialize();Object.defineProperty(this,"minFiles",{"enumerable":true,"configurable":false,
"get":minFilesEnv});return _ref}try{Thinfinity!=undefined}catch(e){Thinfinity={}}if(!Thinfinity.Files)Thinfinity.Files={};Thinfinity.Files.Environment=new FilesEnvironment})();
(function(){const _swstate={"installing":0,"installed":1,"activating":2,"activated":3,"redundant":4};if(Object.freeze)Object.freeze(_swstate);function ServiceWorkerRegistrator(){var _ref=this;var _isAvailable=false;var _notSupportedMsg="Service Workers are not supported by your browser.";var _notSupportedHandler=function(){return _notSupportedMsg};var _notSupportedPromise=function(){return new Promise((resolve,reject)=>{reject(_notSupportedMsg)})};let _controller=null;function initialize(){if("serviceWorker"in
window.navigator)_isAvailable=true;else console.warn(`Service Worker is not available in your browser. "serviceWorker" is not in window.navigator object.`)}function initializeNewService(workerUrl,options){return new Promise(function(resolve,reject){if(options===undefined)options={};window.navigator.serviceWorker.register(workerUrl,options).then(()=>{getInstalledService(options.scope).then(resolve).catch(reject)}).catch(function(error){console.warn("Service worker registration failed:",error);_notSupportedMsg=
error;reject(error)})})}function unregisterService(clientURL,matchCase){return new Promise((resolve,reject)=>{clientURL=normalizeScope(clientURL);getInstalledService(clientURL).then(result=>{if(result&&result.unregister)result.unregister().then(resolve).catch(reject);else if(matchCase===false)unregisterServiceUnMatchCase(clientURL).then(resolve).catch(reject)}).catch(reject)})}function unregisterServiceUnMatchCase(clientURL){return new Promise((resolve,reject)=>{navigator.serviceWorker.getRegistrations().then(registrations=>
{if(registrations){clientURL=clientURL.toLowerCase();let proms=[];registrations.forEach(reg=>{let scope=reg.scope.replace(location.origin,"");if(scope.toLowerCase()===clientURL)proms.push(reg.unregister())});Promise.all(proms).then(resolve).catch(reject)}})})}function normalizeScope(scope){if(scope){if(scope==="/")return scope;let scopes=scope.split("/").filter(s=>s!=="");if(scopes.length==1)return`/${scopes[0]}/`;else return null}else return null}function getInstalledService(clientURL){return new Promise(function(resolve,
reject){if(clientURL!=="")navigator.serviceWorker.getRegistration(clientURL).then(resolve).catch(reject);else reject("Invalid clientURL")})}function getController(){return new Promise((resolve,reject)=>{if(navigator.serviceWorker.controller)resolve(navigator.serviceWorker.controller);else{console.warn(`Controller is not running, please wait...`);let timeoutId=null;timeoutId=setTimeout(()=>{reject(`ServiceWorker is not controlling the page..., trying to reload...`)},45E3);navigator.serviceWorker.ready.then(e=>
{clearTimeout(timeoutId);resolve(navigator.serviceWorker.controller)}).catch(err=>{clearTimeout(timeoutId);reject(null)})}})}function sendMessage(msg,port){return new Promise((resolve,reject)=>{let sendMsg=(msg,port)=>{_controller.postMessage(msg,port)};if(!_controller)getController().then(controller=>{_controller=controller;sendMsg(msg,port);resolve(true)}).catch(err=>{console.warn(`Cannot send message, controller is not ready yet, ${err.message||err}`);reject(err)});else{sendMsg(msg,port);resolve(true)}})}
initialize();Object.defineProperty(_ref,"isSupported",{"enumerable":true,"configurable":false,"get":_isAvailable?()=>{return true}:_notSupportedHandler});Object.defineProperty(_ref,"initializeNewService",{"enumerable":true,"configurable":false,"writable":false,"value":_isAvailable?initializeNewService:_notSupportedPromise});Object.defineProperty(_ref,"unregisterService",{"enumerable":true,"configurable":false,"writable":false,"value":_isAvailable?unregisterService:_notSupportedPromise});Object.defineProperty(_ref,
"getInstalledService",{"enumerable":true,"configurable":false,"writable":false,"value":_isAvailable?getInstalledService:_notSupportedPromise});Object.defineProperty(_ref,"sendMessage",{"enumerable":true,"configurable":false,"writable":false,"value":_isAvailable?sendMessage:_notSupportedPromise});return _ref}try{Thinfinity!==undefined}catch(e){Thinfinity={}}if(Thinfinity.Service===undefined)Thinfinity.Service={};Thinfinity.Service.Worker=new ServiceWorkerRegistrator;Object.defineProperty(Thinfinity.Service.Worker,
"state",{"enumerable":true,"configurable":false,"get":function(){return _swstate}})})();
(function(){var _ref=this;const _minFiles=Thinfinity?.Files?.Environment?.minFiles||false;var _workerUrl=_minFiles?"thinfinity.svc.wkr.wag.min.js":"thinfinity.service.worker.wag.js";const _swState={READY:0,REJECTED:1,RESOLVED:2};const _swFileState={FAILURE:-1,READY:0,LOADING:1,SUCCESS:2};var _options={scope:"/"};var _proms={};var _tlsRequired=window?.consts?.serviceWorkerTLSRequired||"";var _swInvalidScope=window?.consts?.serviceWorkerInvalidScope||"";var _swInvalidFile=window?.consts?.serviceWorkerInvalidFile||
"";var _swNotSupportedUrl="https://www.cybelesoft.com/support/wvpn-ssl-problem/";var _swAvailable=_swFileState.READY;let _pendingWorkerFileProms=[];let _unregistered=false;function initialize(){updateWorkerUrls();checkServiceWorkerAvailability()}function updateWorkerUrls(){let loc=new URL(location);let akPath=Thinfinity.Service?.akPath??loc.searchParams.get("__akey__")??Thinfinity?.global?.variables?.basePath.replace(/\//g," ").trim().split(" ").join("/")??"/";if(akPath)if(_workerUrl.indexOf(akPath)===
-1)_workerUrl=akPath!=="/"?`${loc.origin}/${akPath}/${_workerUrl}`:`/${_workerUrl}`}function installWorker(url,scope){Thinfinity.Service.Worker.initializeNewService(url,{scope}).then(reg=>{let state="";if(reg.installing){console.warn("Service worker installing");state=Thinfinity.Service.Worker.state.installing}else if(reg.waiting){console.warn("Service worker installed");state=Thinfinity.Service.Worker.state.installed}else if(reg.active){console.warn("Service worker active");state=Thinfinity.Service.Worker.state.activated}_proms[scope]._state=
_swState.RESOLVED;fireEvent(scope,{serviceWorker:state})}).catch(error=>{_proms[scope]._state=_swState.REJECTED;fireEvent(scope,{error,status:_tlsRequired})})}function checkServiceWorkerAvailability(){return new Promise((resolve,reject)=>{const callProms=()=>{let verb=_swAvailable===_swFileState.SUCCESS?"resolve":"reject";_pendingWorkerFileProms.forEach(p=>{try{p[verb]()}catch{}})};const fetchWorkerFile=()=>{_swAvailable=_swFileState.LOADING;if(_workerUrl)fetch(_workerUrl,{type:"HEAD"}).then(result=>
{if(result&&result.status===200){_swAvailable=_swFileState.SUCCESS;resolve(true);callProms()}else{_swStatus=result.statusText;_swAvailable=_swFileState.FAILURE;reject(false);callProms()}}).catch(err=>{console.warn(`Cannot fetch file ${_workerUrl}, ${err.message||err}`);_swStatus=_tlsRequired});else{_swAvailable=_swFileState.FAILURE;_swStatus=_swInvalidFile;reject(_swStatus)}};switch(_swAvailable){case _swFileState.READY:fetchWorkerFile();break;case _swFileState.LOADING:_pendingWorkerFileProms.push({resolve,
reject});break;case _swFileState.SUCCESS:resolve();break;case _swFileState.FAILURE:reject();break}})}function getPromName(state){return state===_swState.RESOLVED?"resolved":state===_swState.REJECTED?"rejected":null}function fireEvent(scope,data){if(_proms[scope]){let state=_proms[scope]._state;let stateName=getPromName(state);_proms[scope].forEach(prom=>{try{switch(state){case _swState.RESOLVED:prom.resolve({...{state,status:stateName},...data});break;case _swState.REJECTED:prom.reject({...{state,
status:stateName},...data});break}}catch(error){}});_proms[scope]=[]}}function checkServiceWorker(scope){if(_proms[scope]._state!==_swState.READY)fireEvent(scope,null);else Thinfinity.Service.Worker.getInstalledService(scope).then(result=>{if(result&&result.active)if(!navigator.serviceWorker.controller&&!_unregistered){_unregistered=true;Thinfinity.Service.Worker.unregisterService(scope,false).then(res=>{checkServiceWorker(scope)}).catch(err=>{console.warn(`Cannot unregister service ${scope} ${err.message||
err} `);checkServiceWorker(scope)})}else{console.warn(`Your ServiceWorker "${scope}" is ${result.active.state}`);_proms[scope]._state=_swState.RESOLVED;fireEvent(scope,{result:result.active})}else installWorker(_workerUrl,scope)}).catch(function(response){installWorker(_workerUrl,scope)})}function normalizeScope(scope){if(scope){let scopes=scope.split("/").filter(s=>s!=="");if(scopes.length==1)return`/${scopes[0]}/`;else return null}else return null}function getDonePromise(scope){return new Promise((resolve,
reject)=>{checkServiceWorkerAvailability().then(()=>{scope=normalizeScope(scope);if(scope){if(!_proms[scope]){_proms[scope]=[];_proms[scope]._state=_swState.READY}_proms[scope].push({resolve,reject});checkServiceWorker(scope)}else reject({messsage:_swInvalidScope})}).catch(reject)})}function isRunning(scope){scope=normalizeScope(scope);if(scope&&_proms[scope])return _proms[scope]._state===_swState.RESOLVED;else return false}initialize();Object.defineProperty(_ref,"done",{"enumerable":true,"configurable":false,
"writable":false,"value":getDonePromise});Object.defineProperty(_ref,"isRunning",{"enumerable":true,"configurable":false,"get":isRunning});Object.defineProperty(_ref,"status",{"enumerable":true,"configurable":false,"get":function(){return _swStatus}});Object.defineProperty(_ref,"supportURL",{"enumerable":true,"configurable":false,"get":function(){return _swNotSupportedUrl}});try{Thinfinity!==undefined}catch(e){Thinfinity={}}if(Thinfinity.Service===undefined)Thinfinity.Service={};Thinfinity.Service.Worker.Initialization=
_ref})();
(function(){var _ref=this;function initialize(){try{let basepath="<%=@BASEURL%>";if(window?.Thinfinity?.Service?.Worker?.unregisterService){let proms=[];let vRoot="/";let pathnames=window.location.pathname.split("/").filter(f=>{return f!==""});let vp=null;if(pathnames.length>0){if(basepath!=="/"){basepath=basepath.split("/").filter(f=>{return f!==""});basepath=basepath.pop();let idx=pathnames.findIndex(p=>{return p.toLowerCase()==basepath.toLowerCase()});if(idx!==null)pathnames=pathnames.splice(idx+1)}vp=
pathnames.length>0?`/${pathnames.pop()}/`:null;if(pathnames.length>0)vRoot=`/${pathnames.join("/")}/`}proms.push(Thinfinity.Service.Worker.unregisterService(vRoot,false));if(vp)proms.push(Thinfinity.Service.Worker.unregisterService(vp,false));Promise.all(proms).then(result=>{if(result[0]==true){if(window?.indexedDB)window.indexedDB.deleteDatabase("thinfinity.indexeddb.wvpn");console.log(`Service worker was successful uninstall for ${vRoot} scope, and IndexedDB was removed also.`)}if(result[1]==true){console.log(`Service worker was successful uninstall for ${vp} scope.`);
if(Thinfinity?.WAG?.Rules?.remove)Thinfinity.WAG.Rules.remove()}}).catch(err=>{console.log(`Cannot unregister Service Worker: ${err.message||err}`)})}}catch(error){console.log(`Cannot unregister service worker. ${error.message||error}`)}}initialize()})();
